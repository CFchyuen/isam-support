#!/usr/bin/bash
# Written by Daniel Comeau (dcomeau@ca.ibm.com).   Let me know if you find any issues with it.
# Ver 1.1 06/26/2019 - Added support for parsing output file generated by file_permission_list_v3.fixpack, plus minor big fixes
# Ver 1.2 06/26/2019 - Added directory dump
# Ver 1.3 08/27/2019 - Added creation of sum file


usage="Usage: disk_usage.sh ls.txt [directory]"

###  This variable may need to be adjusted for you ###
awkfile="/users/d/c/dcomeau/shared/disk_usage.awk"

if [ $# -eq 0 ]; then 
	echo $usage
	exit
fi

file=$1

if [ -z "$2" ]; then
	echo "Writing sorted directory usage summary to "$1".dir"
	echo "Sorted by directory usage" > $1.dir
	printf "%-15s%-15s%s\n" "Bytes" "Files" "Directory" >> $1.dir
	awk -v mode=dir -f $awkfile $1|sort -rn >> $1.dir

	echo "Writing sorted file usage to $1.files"
	echo "Sorted by file size" > $1.files
	printf "%-15s%s\n" "Bytes" "Filename" >> $1.files
	awk -v mode=files -f $awkfile $1|sort -rn >> $1.files

	echo "Writing sorted number of files per directory summary to $1.dirfiles"
	echo "Sorted by files per directory" > $1.dirfiles
	printf "%-15s%-15s%s\n" "Bytes" "Files" "Directory" >> $1.dirfiles
	awk -v mode=dirfiles -f $awkfile $1|sort -rn +1 >> $1.dirfiles

	echo ""
	echo "Displaying top 10 of each, see the individual files for more details and saving the results to $1.sum"
	head -n 10 $1.dir $1.files $1.dirfiles |tee $1.sum
	exit

else
          directory=$2:
          printf "\n"
          grep -E -p "^"$directory $file
          exit

fi
